class Graph {
private:
	void operator=(const Graph&) {}
	Graph(const Graph&) {}

public:
	Graph() {}
	virtual ~Graph() {}

	// Initialize a graph of n vertices
	virtual void Init(int n) = 0;

	// Return: the number of the vertices and edges
	virtual int vertices() = 0;
	virtual int edges() = 0;

	// Return v's first neighbor
	virtual int first(int v) = 0;

	// Return v's next neighbor
	virtual int next(int v, int w) = 0;

	// Set the weight for an edge
	// v1, v2 : The vertices
	// wgt: Edge weight
	virtual void setEdge(int v1, int v2, int wgt) = 0;

	// Delete an edge
	// v1, v2: The vertices
	virtual void deleteEdge(int v1, int v2) = 0;

	// Determine if an edge is in the graph
	// v1, v2: The vertices
	// Return: true if edge v1, v2 has non-zero weight
	virtual bool isEdge(int v1, int v2) = 0;

	// Return an edge's weight
	// v1, v2: The vertices
	// Return: The weight of edge v1, v2, or zero
	virtual int weight(int v1, int v2) = 0;

	// Get and Set the mark value for a vertex
	// v: The vertex
	// val: The value to set
	virtual int getMark(int v) = 0;
	virtual void setMark(int v, int val) = 0;
};

// Edge class for Adjacency List graph representation
class Edge {
	int vert, wt;

public:
	Edge() { vert = -1; wt = -1; }
	Edge(int v, int w) { vert = v; wt = w; }

	int vertex() { return vert; }
	int weight() { return wt; }
};

#define UNVISITED	0
#define VISITED		1

// Direct graph
class GraphAdjList : public Graph {
private:
	LList<Edge> **vertex;
	int numVertex, numEdge;
	int *mark;

public:
	GraphAdjList(int numVert) {
		Init(numVert);
	}

	void CreateGraph() {
		//// v1
		//Edge v11(2, 3);
		//Edge v12(5, 1);
		//vertex[1]->insert(v11);
		//vertex[1]->insert(v12);

		//// v2
		//Edge v21(3, 5);
		//Edge v22(5, 7);
		//vertex[2]->insert(v21);
		//vertex[2]->insert(v22);
		//
		//// v3
		//Edge v31(4, 8);
		//vertex[3]->insert(v31);

		//// v4
		//Edge v41(5, 6);
		//vertex[4]->insert(v41);

		Edge v11(4, 10);
		Edge v12(2, 5);
		vertex[0]->insert(v11);
		vertex[0]->append(v12);
		Edge v21(2, 10);
		Edge v22(5, 1);
		vertex[1]->insert(v21);
		vertex[1]->append(v22);
		Edge v31(0, 5);
		Edge v32(1, 10);
		Edge v33(3, 1);
		Edge v34(5, 2);
		vertex[2]->insert(v31);
		vertex[2]->append(v32);
		vertex[2]->append(v33);
		vertex[2]->append(v34);
		Edge v41(2, 1);
		Edge v42(5, 1);
		vertex[3]->insert(v41);
		vertex[3]->append(v42);
		Edge v51(0, 10);
		Edge v52(5, 1);
		vertex[4]->insert(v51);
		vertex[4]->append(v52);
		Edge v61(1, 1);
		Edge v62(2, 2);
		Edge v63(3, 1);
		Edge v64(4, 1);
		vertex[5]->insert(v61);
		vertex[5]->append(v62);
		vertex[5]->append(v63);
		vertex[5]->append(v64);
	}

	~GraphAdjList() {
		delete [] mark;
		for (int i=0; i<numVertex; ++i)
			delete [] vertex[i];
		
		delete [] vertex;
	}

	void Init(int n) {
		int i;
		numVertex = n;
		numEdge = 0;
		mark = new int[n];

		for (i=0; i<numVertex; ++i)
			mark[i]= UNVISITED;

		// Create and initialize adjacency lists
		vertex = (LList<Edge> **) new LList<Edge>* [numVertex];
		for (i=0; i<numVertex; ++i)
			vertex[i] = new LList<Edge>();
	}

	// Return: the number of the vertices and edges
	int vertices() {
		return numVertex;
	}
	int edges() {
		return numEdge;
	}

	// Return v's first neighbor
	int first(int v) {
		if (vertex[v]->length() == 0) {
			cout << "No neighbor.";
			return numVertex;
		}

		vertex[v]->moveToStart();
		auto pos =vertex[v]->currentPos();
		Edge it = vertex[v]->getValue();

		return it.vertex();
	}

	// Return v's next neighbor
	int next(int v, int w) {
		Edge it;
		if (isEdge(v, w)) {
			if ((vertex[v]->currentPos() + 1) < vertex[v]->length()) {
				vertex[v]->next();
				it = vertex[v]->getValue();
				return it.vertex();
			}
		}

		return vertices() + 1;
	}

	// Set the weight for an edge
	// v1, v2 : The vertices
	// wgt: Edge weight
	void setEdge(int v1, int v2, int wgt) {
		if (wgt < 0) {
			cout << "May not set weight to 0";
			return;
		}

		Edge currEdge(v2, wgt);
		if (isEdge(v1, v2)) {
			vertex[v1]->remove();
			vertex[v1]->insert(currEdge);
		}
		else {
			numEdge++;
			for (vertex[v1]->moveToStart();
				 vertex[v1]->currentPos() < vertex[v1]->length();
				 vertex[v1]->next()) {
					 Edge temp = vertex[v1]->getValue();
					 if (temp.vertex() > v2)
						 break;
			}

			vertex[v1]->insert(currEdge);
		}
	}

	// Delete an edge
	// v1, v2: The vertices
	void deleteEdge(int v1, int v2) {
		if (isEdge(v1, v2)) {
			vertex[v1]->remove();
			numEdge--;
		}
	}

	// Determine if an edge is in the graph
	// v1, v2: The vertices
	// Return: true if edge v1, v2 has non-zero weight
	bool isEdge(int v1, int v2) {
		Edge it;
		for (vertex[v1]->moveToStart();
			vertex[v1]->currentPos() < vertex[v1]->length();
			vertex[v1]->next()) {
				Edge temp = vertex[v1]->getValue();
				if (temp.vertex() == v2)
					return true;
		}

		return false;
	}

	// Return an edge's weight
	// v1, v2: The vertices
	// Return: The weight of edge v1, v2, or zero
	int weight(int v1, int v2) {
		Edge curr;
		if (isEdge(v1, v2)) {
			curr = vertex[v1]->getValue();
			return curr.weight();
		}
		else
			return 0;
	}

	// Get and Set the mark value for a vertex
	// v: The vertex
	// val: The value to set
	int getMark(int v) {
		return mark[v];
	}

	void setMark(int v, int val) {
		if (v >= 0 && v < numVertex)
			mark[v] = val;
	}
};

void DFS(GraphAdjList* graph, int v, vector<int> &order) {
	graph->setMark(v, VISITED);
	auto beginIte = order.begin();
	order.insert(beginIte, v);
	
	for (int w=graph->first(v); w <= graph->vertices(); w = graph->next(v, w)) {
		if (graph->getMark(w) == UNVISITED)
			DFS(graph, w, order);
	}
}

// Find min cost vertex
int minVertex(GraphAdjList *G, int *D) {
	int i, v = -1;

	// Initialize v to some unvisited vertex
	for (i=0; i<G->vertices(); i++) {
		if (G->getMark(i) == UNVISITED) {
			v = i;
			break;
		}
	}

	// Find smallest D value
	for (i++; i<G->vertices(); i++) {
		if ((G->getMark(i) == UNVISITED) && (D[i] < D[v]))
			v = i;
	}
	
	return v;
}

#define INFINITY 9999

// Compute shortest path distance from "s"
// Return these distance in "D"
void Dijkstra(GraphAdjList *G, int *D, int s) {
	int i, v, w;
	for (i=0; i<G->vertices(); ++i) {
		v = minVertex(G, D);
		if (D[v] == INFINITY)
			return;

		G->setMark(v, VISITED);
		for (w=G->first(v); w<G->vertices(); w=G->next(v, w))
			if (D[w] > (D[v] + G->weight(v, w)))
				D[w] = D[v] + G->weight(v, w);
	}
}

void AddEdgetoMST(int v1, int v2) {
	cout << "Add edge " << v1 << " to " << v2 << "\n";
}

void Prime(GraphAdjList *G, int *D, int s) {
	int V[6];
	int i, w;
	
	for (i=0; i<G->vertices(); ++i) {
		int v = minVertex(G, D);
		if (D[v] == INFINITY)
			return;

		G->setMark(v, VISITED);
		cout << "set " << v << " mask" << endl;
		if (v != s)
			AddEdgetoMST(V[v], v);         // Add edge to MST

		for (w=G->first(v); w<G->vertices(); w=G->next(v, w)) {
			if (D[w] >  G->weight(v, w)) {
				D[w] = G->weight(v, w);
				V[w] = v;
			}
		}
	}
}

